{"transpiled":true,"noir_version":"1.0.0-beta.1+c4e38215cedb5afb","name":"Main","functions":[{"name":"set_just_field","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[{"name":"value","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JgACBAEnAAABBIBFJgAABAMmAgIEASYCAwQAHxgAAwACgEQtCIBEAAEkAAAARSQAAABGJwIAAQSARSYCAgQAOg0AAQACJSQAAAB7HgIAAgAeAgADADI4AAIAAwAEJgICAQEjAgAEAAAAbyQAAACkJgICAAIvDAABAAIlJwCABAR4AA0AAACABIADIwCAAwAAAKMpAQABBfeh86+lrdTKOwEBAiUpAQABBb4eP/8+pPb6OwEBAiUtABjKGMo=","debug_symbols":"5ZTLboMwEEX/xWsWHns8tvMrVRWRYCIkBIhHpQrl32tHvEoR2ZBuskEedPC9M8a3Z4m7dLdzVqRlw04fPcvLa9xmZeGr/h6xS53leXY7L18zHh5aPfimiotQNm1ct+wERCJirkjCUgu/Q5rljp3IL//CnKsR5kJNMHDcoBFRDzSioonWW1sbOW1tpIAl/Bkxww/wbibYm/9H70fMHWGaOz2bOyiaaAK9791KO8IWJa68W3mod+C/vQcF82oFP7GXSwBsSZDA4SNC80RACjkKSLSzgNo6YW0kDbQ2yuyfsCZpR5gs34d9JzhfEzBy9UMA0Ft0evfVV1xn8SV3Q7KmXXFdBG37XblV5lZ1eXVJV7uQvnPwQggv37QwjwGGwkYSvIbX+QE=","brillig_names":["set_just_field"]},{"name":"get_just_field","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"5487339650275755127":{"error_kind":"string","string":"Function get_just_field can only be called statically"}},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JgACBAEnAAABBIBFJgAABAMmAgEEACYCAgQAHxgAAgABgEQkAAAARSQAAABGLQQAAYBEJwIAAgSARCYCAwQBOg0AAgADJSQAAACbHgIAAQAeAgACADI4AAEAAgADJgIBAQEjAgADAAAAbyQAAADEHgIAAQkmAgIAAQo4AQIDIwIAAwAAAIskAAAA1iYCAQACLgwAAQACLAwCASUnAIAEBHgADQAAAIAEgAMjAIADAAAAwykBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEFTCbyVriaRHc7AQECJS0AGMoYyg==","debug_symbols":"5VXBbsIwDP2XnHuIY8dJ+JVpQgUCqlS1qJRJE+LflyAaoKuo1pVddoni6NnvxXbik9j41XG3LKptfRCLt5Mo63XeFnUVrNM5E6umKMtit7w/FjIuRl/wh31eRfPQ5k0rFsCsMuGrTdwaFSJsi9KLBYftd7CUugNLpRMYJA2gichc0USaE9oMhbaYQltUcA9+z4SVM2i3CRzE/6H2OfJOkPLOY3kHzQnNYJ5rd+g6sCOknnaHs2oH+ag9MthXM4SMvZwC4NcU7GTXcewUjlRNpshOWt2rGsBPbxydFExxmsKENMXJDTlZou7lsRmpYQiRasi3Tgc99IgMWryiDUl6Xg4D6W8x6vEDGNIhEW/NxNyvHtG/uOk5WB95U+Sr0l+H1/ZYre9mWfu5972xtm/qtd8cGx8H3G22QZwPymVIl/YPBuoMTeAIPF8=","brillig_names":["get_just_field"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"16541607464495309456":{"error_kind":"fmtstring","item_types":[],"length":16},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"packed_note_content","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/9VZy67aQAwdSEJIuAEKn3Cl7tomXJ47Fn3c30AFPqHrrLppP7qMGCcH46siYVfFEpoknhyfOXZmJqHjztY//TrhOA5tz10b9dmGtrzPKkWs0pJn50F4dh+EZ/QgPGNFnh2Bp2/peUvc+ZlL3fl5bC7iTT7BEdzk/gYAwX6HNgttF/yKCakyYZBa+Otyvs/cpSnzf8kCZmqDvyD8vg1+Sbw/1y0+joXiRqF9rVstX+Eeb0U4xuIlXPJ1wfeF+SLwfWU+rOFvzId1T5xIN1qYlOtqY50XGlsKY+u80TrXaofXSOvcmdZoRTnPGB/On/gU1Kdu+fSYLwZfxnwJ+Eh/3z5DP577FPp9hONP0IfXZ+Su65n8lH/U3aK+YgP8k82lHPD8xPVlbPRhDmLQ85npY7FuoD4W+nt9pm/wp2Nvae0ai5ieqBFp1sf+zJeBL64v4+ThPIY4iEU8Etb/QzgfhbYH99D9YyF+j8W/4C1cQ404ViRco/7++Xwfjgfh52voJ93jructvc31ci7N4Xr4qwY/s+F/JPzcBn9J+AMb/GZv82SCPysJv7Dh38xBQ5v6afaWIxv+B8Ifm+DPD7QOv3OtNXNEOJ7Adb35u6pu2SNh/JxxtdojTRgfrg+uwd43FbiOBR/P4VSIMxXiSFiZItaTItboPx1jXxFroIg1VMTSzGOqiKWpV66IVShiada9pl6UR2mf5m0b2vJOk/ZpiviVtE/TfJcnram+YkFDHF/C+v9gOg9MeFYzWnPoWacYGLswin3rek3xC4EP8c4F3z0fZw+L9XGzXmxOW7JqOds0+SwYV34N34twPsb+0tov7fsUtS6ld/8h6OotBl/BfAn4iKP07j804n+L/hh/LPj4+n9rLifuej0csHHjN6+typjb74HSt3rj+Wtx67NJ8XN3PV//q++NqA/fS+cC17Hg4/uTXIiTC3EeEYt/s0cNfV2TTnHd+rVyuVq3f3TRXJS4y/8BHIufsP6/wjmOjdp75vzjalcdX3bH3WK338+/7yYM31sXdPoDg5oBSR0fAAA=","debug_symbols":"tdfNaoQwFIbhe8k6i5z8mIm3UsoQNQ6BECVqoYj33jhM26GzLN9GiBwfN77g2dkQuu12jXmcFta+7SxNvV/jlOtpPzjrSkwp3q7Pt5k4L87c55fZ5/O4rL6srNWSs5AH1hpRnx5jCqxt5MFfBu33oLU/g0Ye75y5BgVbFHxBwQ4EkxAwmWCyhMkKJmuYbGByA5MtTL7AZFiDBGuQYA0SrEGCNUiwBgnWIMEaJFiD9L8GnXoM1k/hhXYwWgocTTha4miFozWONji6wdEWR+NqlLgaFa5GBarxqKcPX6LvUnhsTeOW+6clav2cw599ai5TH4athHOz+l2qzvSU4drc/zzqgZTmpFx9SX3RFw==","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"process_log","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"16541607464495309456":{"error_kind":"fmtstring","item_types":[],"length":16},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[{"name":"log_plaintext","type":{"fields":[{"name":"storage","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},"visibility":"private"},{"name":"tx_hash","type":{"kind":"field"},"visibility":"private"},{"name":"unique_note_hashes_in_tx","type":{"fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},"visibility":"private"},{"name":"first_nullifier_in_tx","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAA/92c927bMBDG5URKIieOndG9927leHeme+/W/dsdfosWAtqHSPu09Zfw7DPDAilCovkqQJCto+9+PFHUiTy6EG1s3cFeMJ9jc5w2R5xfjMY3Kbtqjtn2tqpHXVkoxgIB4wQB4yQBY0zAmBAwThEwThMwzhAwpgSMRQLGWQLGOQLGEgHjPAFjmYCxQsC4EIAxBOciCeeSR04d24fiXY52fhvdRcC4m4BxDwHjXgLGfQSM+wkYDxAwHiRgPETAeJiA8QgB41ECxmMEjMcJGE8QMJ4kYDxFwHiagPEMAeNZAsZzBIznCRgvEDBeJGC8RMB4mYDxCgFjRsBYJWBcIWCsETDWCRgbBIxNAsYWAWObgLFDwHiVgPEaAeN1AsYbBIw3CRhvETCuEjDeJmC8Q8B4l4DxHgHjfQLGBwSMDwkYHxEwPiZgfELA+JSA8RkB43MCxhcEjC8JGF8RML4mYHxDwPg2AGMIzncknO9JOLuBOKMPFvTEYMfCLSyMwsIjLOzBwhksTMHCDyyswMIFLAxA4j0S25E4XhnsSHxGUjESdpEEiyRTJHEiSRJJiEjyQxIdktSQBIYkKyQxIUno6GA/NtiRRIIkDSRBIMkAk/iYJMckNCZ5MYmKSUpMAmKSDZNYmCRCrTDJgUkEDNJjEByDzBjExSApBiExyIdBNAxSYRAIgywYxJBBArzk4iUSL2l4CcJLBoJ4BMkIQhHkIYhCkIIgAA9ZPMTwkEAnjE4OnQhuUtwAaFzd6M+bNJIf5pia44SSe1xEV00tuz71t7POx9RRP4/8tdTonAmiv9ES/WkY/kwW2t7LR/p1XcTupDl285Evu/k4k5RZU2XWrDJSnzDXu14P66/qSsnyUaTqIraLYWzXCpY9fV20TOwXo5Btc2NRsrYnPLZ/pO8oSZl8xFOwZHG+uR4iS5RMri/snFfl7LY1Y8mEBZu035LyjWwfjEyuaax0+muvjXbY9lrP/l17rVf/x/YaW7I431yPv22vum3Z7TWJRpv0pSKbUrKflmxayX7lI9sNxdE0n8P2yRvPYH3v+X6GLTn4tS1s0/nIH9IGJ9W5RPlv3T+6vCVLlSzOx+0UzfdY2dG6hCOxytfN97I5TqnfyO8rDvtTlv0xbsc52y+po3zqKI+2dsl8njU72tA3+U20+d7Fvmq+Z9vamh1XP+lPf6vm6gs98n8R/bNB9NeH+ufC8A/jqlIY/w/1z4fh74v+chj9TdFfCaO/IfoXguhfGcYJ+s927DhhSZ33GNduOU4Q+0WLNVScsGTx2P7RcQJkyw7WikNm9wHLDjvLDjsuXfMedS141FXcoXUsedRV8agr9ajL53Wc86jLp7/KHnXNeNTls9379Jdcx7DjVVnmitOiAPqLYfQP+37po/W7ma6T2E+s8l8tP88F8fNoHEr6M+0LVyzl0/ZWn9div+TgEe6iQ7adP0D70mj3O+1GZxDSV5srnaxg6RdW+5x+L9L9iy7veva74j6Pvs5cYxBl5VdssZLNW7JEyYRRj0G44mKf/Fvxv7Zfccjs/nmr13IxGm9r+n6cjUb3c5z7r3urvfHHLuuMRn8SjY8xRpb9xCr/3Xy3+7rt3iP9Vq/ar/X6vUbv8+f6p96ipV/7EH76DXVGL3ipUwAA","debug_symbols":"tZbLCoMwEEX/ZdZZONOqrb9SSokaJRCiRC0U8d8bpQ9p13cTmDA5kyxOuDPVppzam/VNN1Bxmcl1lR5t52M1L4rKYJ2z7W2/Tcm6cCLbgaHXfq2HUYeRiqMoMr6mIk3i8cY6Q0Umi/przN+Nef5pTGW5qkg+wMhHGDmFkTMYOYeRTzDyGUXmBEZmGBnmIMMcZJiDDHOQYQ4yzEGGOcgwBwXmoMAcFJiDAnNQMA4usbrrYHXpzCtANJOvdnlifPTmJ1r0oatMPQWzhoxvvljfHi+Uyvbrx4IlU3zgOCQOegI=","brillig_names":["process_log"]},{"name":"sync_notes","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[],"return_type":null},"bytecode":"H4sIAAAAAAAA/7WTyw7CIBBFqcUo0sTEx39MU0y7dOHafyCtLHVRN+766dZkJkyI0QVwEzJMgMNcHoXwKjBKESGCHDEqjAs2Xs7tjDnEqVbBvin5HRijvvhLWH+jkFnk4QPxM50/rJBzmTyfe6F913PTrF8J/z5y+af7y+l//8OzRq9bzCvh/8P4uvfXx/M2ij/SbJGc0ptoOwAqvkT+EvmhJBvn8w+Yb4Svj6KMqNO1tnaNdfZkh8H0dhfwP+KH/QbzqHp4zgQAAA==","debug_symbols":"bY/dCoMwDIXfJde9SLo5sK8iQ6pGKZRWah0M8d0Xxybu5+aQE74cchbouJmH2oU+TmCqBXxsbXYxiFtWBU1y3ruhPq4BN6HTk59GGzY7ZZsymLNWwKEDU6Bc984zmIte1Q9ISPhmZdbljtMZ//Ml7bwm/OCvq9ibTc42nl+v93NoD03yfeSvUmOKLXdz4q3eoZloRYXSKLES/QA=","brillig_names":["sync_notes"]},{"name":"read_just_field_value","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/7WWTVODMBCGk5Z+UERn6i/woldo6bTH+nHx4sGD9wihdlSYAbz3pwu6GdZtYOoQdobZJCRP3iybBM5q4+At9tc4O8F4S9sNeBv8AL0fls8W6l43820yr0n+xgtWtmZ9BvUvbWDyfvie4vcUf28CnIdDzcdrUfNOy+cMlV0ouy3j+9ReftvARkzT/NL8ywb9lTkQhyuoV7E5h/JOFncfafj+9PX5KjO8y2h0mYaMraLOa+p9mhSZCIvbKMpknlPCQENmDdQZor6JffIYNen5J+1FZvk+TSjNOpE2hD4j1B+PsTVtW/BeN1so9tg823eBPSFxwWuaonaDebzQZRz9unj+GdFqel9xMp/SQ+Oj8rnKMAfKeZFmYiefpYiwdBo+6mna6e5NvIV043BaqvpYw2mzvq8LrtHZFlrOjlO+bQtesOOjRo11WfP14bD6V8I6mF/7evO79h/9wB8x/aFqofe4/zXUZ0i/8lYHnfFa+PFSxGIloigIxZzwGYnTN/0PSHvgCQAA","debug_symbols":"7ZjBjoIwEIbfpWcOnU47bX2VzcagoiEhYBA32RjffekuBbYQOHjDXgw1v5PPbyAZ5sFO2eF+2eflubqx3ceDFdUxbfKqbE+PZ8IOdV4U+WU//ppx9wHyN3+7pqU73pq0btgOiETCsvLkLrVoK5zzImM7ai8nYcNVlzUC+6iWM1ElfFQp3kdBmOdnwkC9jqLIo2izjCLRdlFJZoJCL6NYjl3Wgl5GoV4gCZqg6NdRJHgUJVdQDO+imk8bZOZQtDD+JwqWQUBZ3lODGuqrORYBRndpIfhKO8GSxxAcaTmsueyRh96AxLn7RPu60tp/WWfEvqERtP7JUePb9c+I4NFIYASikcCIiEYCIxiNBEZkNBIYUdFIYISikcCI3ogRsoMRs2YEwc/PiDjMaMhnMbj2gzlwM0qLubQBb9ugXMkSeHU0+nsu6zqzldl5e53Zygy/uc7gVt4lNtaZZ3v8Sus8PRRZt2A638vjaN/UfF+zYPV0ratjdrrXmVtCjfZPrseICZq2bFv6Bw==","brillig_names":["read_just_field_value"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"}},"parameters":[],"return_type":null},"bytecode":"JgACBAEnAAABBIBEJgAABAMmAgEEACYCAgQAHxgAAgABgEQkAAAAPyQAAABHJwIAAQSARCYCAgQAOg0AAQACJwCAQwQAAyUkAAAE1CwIAQMAAAECASYCBAEALA4EAywIAQMAAAECASYCBQAALA4FAywIAQMAAAECASYCBgACLA4GAx4CAAMANTgAAwAHAAgAJgIJAQEjAgAIAAAAryIAAACiLAwEASwMBQIiAAAAvCwMCQEsDAcCIgAAALwjAgABAAAAzSYCCgQAOwkBCjU4AAMAAQAKAiMCAAoAAADwIgAAAOMsDAQHLAwFCCIAAAD9LAwJBywMAQgiAAAA/SMCAAcAAAEOJgIDBAA7CQEDJgIDBAAmAgcEASwIAQomAgsEAgAQAQsBJgMKBAEAKAoCCx88AAMABwALACgKAgwAOAwDDSwNDQscDAsMBBwMDAoALAgBCwAAAQIBJgMLBAEAKAsCDB88AAcAAwAMJgIMAA0sCAENJgIOBAQAEAEOASYDDQQBACgNAg4sDA4PLA4MDwAoDwIPLA4KDwAoDwIPLA4FDywNDQoAKAoCCiwOCg0qAgAKAAAAAAAAAAADAAAAAAAAAAAmAhEEEiwIABIsDAoTABAAEQAkAAAE/SwEAAAsDBMMLAwUDiwMFQ8sDBYQLA0MCgAoCgIKLA4KDCwIAQoAAAECASwODAosDQ4MACgMAgwsDgwOLAgBDAAAAQIBLA4ODCwIAQ4AAAECASwODw4sCAEPAAABAgEsDhAPLAwDASIAAAJGDSgAAYBDAAsjAgALAAAEZCIAAAJbJgINBBAsCAAQLAwKESwMDBIsDA4TLAwPFAAQAA0AJAAABaQsBAAALAwRCwo4CAsKIwIACgAAApgkAAAGKAo4AgUIHgIACgEKOAIKCxI4CAsCIwIAAgAAArkkAAAGOiYCAgABLAgBCCYCCQQDABABCQEmAwgEAQAoCAIJLAwJCiwOAgoAKAoCCiwOAgoqAgAJAAAAAAAAAAACAAAAAAAAAAAmAg4EDywIAA8sDAkQABAADgAkAAAE/SwEAAAsDBAKLAwRCywMEgwsDBMNLA0KCQAoCQIJLA4JCiwIAQkAAAECASwOCgksDQsKACgKAgosDgoLLAgBCgAAAQIBLA4LCiwIAQsAAAECASwODAssCAEMAAABAgEsDg0MJgINBAIsDAMBIgAAA4MMOAENAyMCAAMAAAP0IgAAA5UmAgMEDSwIAA0sDAkOLAwKDywMCxAsDAwRABAAAwAkAAAFpCwEAAAsDA4BCjgBBQMKOAMEBSMCAAUAAAPXJAAABkwvDAACAAEnAgABAAK8LwwAAQAGHgIAAQAzAgABJSMCAAMAAAQBIgAABFYmAg4EAgw4AQ4PIwIADwAABBgkAAAGXgAoCAIOADgOAQ8sDQ8DJgIOBA8sCAAPLAwJECwMChEsDAsSLAwMEywMAxQAEAAOACQAAAZwLAQAACIAAARWADgBBwMsDAMBIgAAA4MjAgALAAAEcSIAAATGJgIQBAMMOAEQESMCABEAAASIJAAABl4AKA0CEAA4EAERLA0RCyYCEAQRLAgAESwMChIsDAwTLAwOFCwMDxUsDAsWABAAEAAkAAAGcCwEAAAiAAAExgA4AQcLLAwLASIAAAJGJwCABAR4AA0AAACABIADIwCAAwAABPwpAQABBfeh86+lrdTKOwEBAiUkAAAE1CYCAgAALAgBAyYCBAQEABABBAEmAwMEAQAoAwIELAwEBSwOAgUAKAUCBSwOAgUAKAUCBSwOAgUsDQMEACgEAgQsDgQDLAgBBCYCBQQFABABBQEmAwQEAQAoBAIFLAwFBiwOAgYAKAYCBiwOAgYAKAYCBiwOAgYAKAYCBiwOAQYmAgEEACYCAgEALAwCBSwMAQYsDAQCLAwFBCwMAwEsDAYDJSQAAATULA0EBSYCBgEACjgFBgcjAgAHAAAFyCYCCAQAOwkBCCYCBQQGLAgABiwMAQcsDAIILAwDCSwMBAoAEAAFACQAAAefLAQAACwNAQUsDQIGLA0DBywOBQEsDgYCLA4HAyYCAQEBLA4BBCYCAQQAACgGAgMAOAMBBCwNBAIsDAIBJSkBAAEF9IABplnTJ0I7AQECJSkBAAEFHwBQEkAkIu47AQECJSkBAAEFAtxuJ4B2Ep07AQECJSkBAAEF6J0J/qERLQ47AQECJSQAAATULA0DBiwNBAcmAggBAAo4BwgJIwIACQAABpgmAgoEADsJAQoLKAAGgEMAByYCBgQBIwIABwAABysiAAAGsiwNAQcsDQIILA0DCSwNBAomAgwEAww4CQwNIwIADQAABtkkAAAGXi0EAAeAAycAgAQEAAQkAAAI/C0IgAUACwAoCwIMADgMCQ0sDgUNADgJBgUOOAkFByMCAAcAAAcWJAAACYosDgsBLA4IAiwOBQMsDgoEIgAAB54mAgcECCwIAAgsDAEJLAwCCiwMAwssDAQMABAABwAkAAAHnywEAAAsDQEHLA0CCCwNBAkmAgoEAC0EAAeAAycAgAQEAAQkAAAI/C0IgAUACwAoCwIMADgMCg0sDgUNLA4LASwOCAIsDgYDLA4JBCIAAAeeJSQAAATUJgIGBAAmAgcEASwMBgUiAAAHtw0oAAWAQwAGIwIABgAACCciAAAHzCwNAQUsDQIGLA0DBywNBAgmAgkEBCwIAQomAgsEBQAQAQsBJgMKBAEAKAYCCyYCDAQEACgKAg0+DwALAA0sDQoGACgGAgYsDgYKLA4FASwOCgIsDgcDLA4IBCUsDQMGDDgFBggAOAUHBiMCAAgAAAhCIgAACPMsDQEILA0CCSwNAwosDQQLJgINBAQMOAUNDiMCAA4AAAhpJAAABl4AKAkCDQA4DQUOLA0ODCYCDgQDDDgFDg8jAgAPAAAIjiQAAAZeACgIAg4AOA4FDywNDw0AOAwNDiYCDQQEDDgFDQ8jAgAPAAAIuCQAAAZeLQQACYADJwCABAQABSQAAAj8LQiABQAMACgMAg0AOA0FDywODg8sDggBLA4MAiwOCgMsDgsEIgAACPMsDAYFIgAAB7ctAYADgAYLAIAGAAKAByMAgAcAAAkXIgAACSItAIADgAUiAAAJiS0AAAGABQEAAAGABAABAQCAA4AEgAktAIADgAotAIAFgAsLAIAKgAmADCMAgAwAAAl1LQGACoAILQKACIALAQCACgACgAoBAIALAAKACyIAAAlEJwGABQQAAQMAgAYAAoAGIgAACYklKQEAAQVFp8pxGUHkFTsBAQIlLQAYyhjK","debug_symbols":"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","brillig_names":["constructor"]},{"name":"read_field_in_map","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2280934621015953945":{"error_kind":"string","string":"Function read_field_in_map can only be called statically"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"}},"parameters":[{"name":"key","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["read_field_in_map"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16541607464495309456":{"error_kind":"fmtstring","item_types":[],"length":16},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2280934621015953945":{"error_kind":"string","string":"Function read_field_in_map can only be called statically"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5487339650275755127":{"error_kind":"string","string":"Function get_just_field can only be called statically"}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["public_dispatch"]},{"name":"set_field_in_map","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"}},"parameters":[{"name":"key","type":{"kind":"field"},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JgACBAEnAAABBIBGJgAABAMmAgMEAiYCBAQAHxgABAADgEQtCIBEAAEtCIBFAAIkAAAASyQAAABTJwIAAQSARiYCAgQAOg0AAQACJwCAQwQAAyUkAAADnh4CAAQAHgIABQAyOAAEAAUABiYCBAEBIwIABgAAAHwkAAADxyYCBQABLAgBBiYCBwQDABABBwEmAwYEAQAoBgIHLAwHCCwOBQgAKAgCCCwOAQgmAgEAACwIAQUmAgcEBAAQAQcBJgMFBAEAKAUCBywMBwgsDgEIACgIAggsDgEIACgIAggsDgEILA0FBwAoBwIHLA4HBSoCAAcAAAAAAAAAAAIAAAAAAAAAACwIAQgmAgkEBQAQAQkBJgMIBAEAKAgCCSwMCQosDgEKACgKAgosDgEKACgKAgosDgEKACgKAgosDgcKLA0FBwAoBwIHLA4HBSwIAQcAAAECASwOBQcsDQgFACgFAgUsDgUILAgBBQAAAQIBLA4IBSwIAQgAAAECASYCCQQALA4JCCwIAQoAAAECASYCCwEALA4LCiYCDAQCJgINBAEsDAkDIgAAAakMOAMMDiMCAA4AAAJEIgAAAbssDQoDCjgDCwYjAgAGAAAB1SYCDAQAOwkBDCYCAwQMLAgADCwMBw0sDAUOLAwIDywMChAAEAADACQAAAPZLAQAACwNBwMsDQUGLA0IDCwOAwcsDgYFLA4MCCwOBAoAKAYCBAA4BAkFLA0FAwo4AwEECjgECwEjAgABAAACPSQAAAU2LwwAAgADJSMCAA4AAAJRIgAAA5AmAg8EAgw4Aw8QIwIAEAAAAmgkAAAFSAAoBgIPADgPAxAsDRAOLA0IDywNChAKOBALESMCABEAAAKUJgISBAA7CQESCygAD4BDABAjAgAQAAADIiIAAAKpLA0HDywNBRAsDQgRLA0KEiYCFAQDDDgRFBUjAgAVAAAC0CQAAAVILQQAD4ADJwCABAQABCQAAAVaLQiABQATACgTAhQAOBQRFSwODhUAOBENDg44EQ4PIwIADwAAAw0kAAAF6CwOEwcsDhAFLA4OCCwOEgoiAAADkCYCDwQQLAgAECwMBxEsDAUSLAwIEywMChQAEAAPACQAAAPZLAQAACwNBw8sDQUQLA0KES0EAA+AAycAgAQEAAQkAAAFWi0IgAUAEgAoEgITADgTCRQsDg4ULA4SBywOEAUsDg0ILA4RCiIAAAOQADgDDQ4sDA4DIgAAAaknAIAEBHgADQAAAIAEgAMjAIADAAADxikBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSQAAAOeJgIGBAEmAgcEACwMBwUiAAAD8Q0oAAWAQwAHIwIABwAABGEiAAAEBiwNAQUsDQIGLA0DBywNBAgmAgkEBCwIAQomAgsEBQAQAQsBJgMKBAEAKAYCCyYCDAQEACgKAg0+DwALAA0sDQoGACgGAgYsDgYKLA4FASwOCgIsDgcDLA4IBCUsDQMHDDgFBwgAOAUGByMCAAgAAAR8IgAABS0sDQEILA0CCSwNAwosDQQLJgINBAQMOAUNDiMCAA4AAASjJAAABUgAKAkCDQA4DQUOLA0ODCYCDgQDDDgFDg8jAgAPAAAEyCQAAAVIACgIAg4AOA4FDywNDw0AOAwNDiYCDQQEDDgFDQ8jAgAPAAAE8iQAAAVILQQACYADJwCABAQABSQAAAVaLQiABQAMACgMAg0AOA0FDywODg8sDggBLA4MAiwOCgMsDgsEIgAABS0sDAcFIgAAA/EpAQABBQLcbieAdhKdOwEBAiUpAQABBeidCf6hES0OOwEBAiUtAYADgAYLAIAGAAKAByMAgAcAAAV1IgAABYAtAIADgAUiAAAF5y0AAAGABQEAAAGABAABAQCAA4AEgAktAIADgAotAIAFgAsLAIAKgAmADCMAgAwAAAXTLQGACoAILQKACIALAQCACgACgAoBAIALAAKACyIAAAWiJwGABQQAAQMAgAYAAoAGIgAABeclKQEAAQVFp8pxGUHkFTsBAQIlLQAYyhjK","debug_symbols":"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","brillig_names":["set_field_in_map"]}],"outputs":{"globals":{"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Main"}},{"name":"fields","value":{"fields":[{"name":"field_in_map","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"just_field","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"key","type":{"kind":"field"}}],"kind":"struct","path":"Main::read_field_in_map_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Main::read_field_in_map_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"Main::constructor_parameters"}}],"kind":"struct","path":"Main::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"Main::set_just_field_parameters"}}],"kind":"struct","path":"Main::set_just_field_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"key","type":{"kind":"field"}},{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"Main::set_field_in_map_parameters"}}],"kind":"struct","path":"Main::set_field_in_map_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"Main::get_just_field_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Main::get_just_field_abi"}]}},"file_map":{"104":{"path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.74.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"},"128":{"path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.74.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"130":{"path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.74.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    /// Safety: The to_address function combines all values in the instance object to produce an address,\n    /// so by checking that we get the expected address we validate the entire struct.\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"},"140":{"path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.74.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note_content,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        packed_note_content,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note_content: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    let _ = notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    sync_notes_oracle_wrapper();\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let note_content = array::subarray(fields, read_offset + 2);\n\n            let mut note = Note::unpack_content(note_content);\n            note.set_header(NoteHeader { contract_address, nonce, storage_slot, note_hash_counter });\n\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\n}\n\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\n/// Includes the last known index used to send a note tagged with this secret.\n/// For this to work, PXE must know the ivsk_m of the sender.\n/// For the recipient's side, only the address is needed.\npub unconstrained fn get_indexed_tagging_secret_as_sender(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> IndexedTaggingSecret {\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\n    IndexedTaggingSecret::deserialize(result)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\n/// for later querying via the `get_notes` oracle.\npub fn sync_notes() {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        sync_notes_oracle_wrapper();\n    }\n}\n\nunconstrained fn sync_notes_oracle_wrapper() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n"},"143":{"path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.74.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Packable};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"},"146":{"path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.74.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"154":{"path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.74.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"199":{"path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.74.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"241":{"path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.74.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        function_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            function_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"258":{"path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.74.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::{constants::TWO_POW_64, utils::{arrays::array_concat, field::field_from_bytes}};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_contract_class_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_contract_class_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; N * 32];\n    for offset in 0..N {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"26":{"path":"std/hash/poseidon2.nr","source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"287":{"path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.74.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"304":{"path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.74.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr","source":"use crate::traits::{Packable, ToField};\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for U128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self.to_field()]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"},"321":{"path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.74.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr","source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    /// Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    /// of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"},"324":{"path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.74.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"51":{"path":"std/option.nr","source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"52":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"62":{"path":"/home/anon/aztec/aztec-nr-experiments/writing_to_reading_from_storage/src/main.nr","source":"use dep::aztec::macros::aztec;\nmod test;\n\n#[aztec]\ncontract Main {\n    use dep::aztec::{macros::{functions::{initializer, public, view}, storage::storage}};\n    use dep::aztec::prelude::{AztecAddress, Map, PublicImmutable, PublicMutable};\n\n    #[storage]\n    struct Storage<Context> {\n        field_in_map: Map<Field, PublicMutable<Field, Context>, Context>,\n        just_field: PublicMutable<Field, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor() {\n        storage.field_in_map.at(1).write(1);\n        storage.just_field.write(700);\n    }\n\n    #[public]\n    fn set_just_field(value: Field) {\n        storage.just_field.write(value);\n    }\n\n    unconstrained fn read_just_field_value() -> Field {\n        storage.just_field.read()\n    }\n\n    #[public]\n    #[view]\n    unconstrained fn get_just_field() -> Field {\n        storage.just_field.read()\n    }\n\n    #[public]\n    fn set_field_in_map(key: Field, value: Field) {\n        storage.field_in_map.at(key).write(value);\n    }\n\n    #[public]\n    #[view]\n    unconstrained fn read_field_in_map(key: Field) -> pub Field {\n        storage.field_in_map.at(key).read()\n    }\n}\n"},"72":{"path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.74.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, Packable, Serialize};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call_static(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_opcode(gas, address, args)\n}\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"},"74":{"path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.74.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"}}}